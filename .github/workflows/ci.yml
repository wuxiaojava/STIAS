name: Windows CI/CD

on: 
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: windows-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 运行测试
        run: |
          python test_ci.py

      - name: 创建部署包
        run: |
          python deploy_windows.py

      - name: 上传部署包
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: deploy_windows.zip

  deploy:
    needs: test
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: 下载部署包
        uses: actions/download-artifact@v3
        with:
          name: deployment-package
          path: ./deploy

      - name: 部署到Windows服务器
        uses: appleboy/winrm-action@v1
        with:
          host: ${{ secrets.WIN_SERVER_IP }}
          username: ${{ secrets.WIN_USER }}
          password: ${{ secrets.WIN_PASSWORD }}
          port: ${{ secrets.WIN_PORT || 5985 }}
          script: |
            # 停止现有服务
            $serviceName = "STIAS-StockAnalysis"
            if (Get-Service -Name $serviceName -ErrorAction SilentlyContinue) {
              Stop-Service -Name $serviceName -Force
              Write-Host "已停止现有服务: $serviceName"
            }

            # 创建应用目录
            $appDir = "C:\STIAS"
            if (!(Test-Path $appDir)) {
              New-Item -ItemType Directory -Path $appDir -Force
              Write-Host "创建应用目录: $appDir"
            }

            # 解压部署包
            $deployZip = "C:\deploy\deploy_windows.zip"
            if (Test-Path $deployZip) {
              Expand-Archive -Path $deployZip -DestinationPath $appDir -Force
              Write-Host "解压部署包到: $appDir"
            }

            # 设置Python环境
            $pythonPath = "C:\Python39\python.exe"
            if (!(Test-Path $pythonPath)) {
              Write-Host "Python未安装，请先安装Python 3.9+"
              exit 1
            }

            # 创建虚拟环境
            $venvPath = "$appDir\venv"
            if (!(Test-Path $venvPath)) {
              & $pythonPath -m venv $venvPath
              Write-Host "创建虚拟环境: $venvPath"
            }

            # 激活虚拟环境并安装依赖
            $activateScript = "$venvPath\Scripts\Activate.ps1"
            if (Test-Path $activateScript) {
              & $activateScript
              pip install --upgrade pip
              pip install -r "$appDir\requirements.txt"
              Write-Host "安装Python依赖完成"
            }

            # 创建启动脚本
            Set-Content -Path "$appDir\start_service.bat" -Value "@echo off`ncd /d $appDir`ncall venv\Scripts\activate.bat`npython app.py"

            # 使用NSSM创建Windows服务
            $nssmPath = "C:\nssm\nssm.exe"
            if (!(Test-Path $nssmPath)) {
              $nssmUrl = "https://nssm.cc/release/nssm-2.24.zip"
              $nssmZip = "C:\nssm.zip"
              Invoke-WebRequest -Uri $nssmUrl -OutFile $nssmZip
              Expand-Archive -Path $nssmZip -DestinationPath "C:\nssm" -Force
              Remove-Item $nssmZip
            }

            # 安装服务
            & $nssmPath install $serviceName "$appDir\start_service.bat"
            & $nssmPath set $serviceName AppDirectory $appDir
            & $nssmPath set $serviceName Description "股票技术指标分析系统"
            & $nssmPath set $serviceName Start SERVICE_AUTO_START

            # 启动服务
            Start-Service -Name $serviceName
            Write-Host "服务已启动: $serviceName"

            # 等待服务启动
            Start-Sleep -Seconds 10

            # 检查服务状态
            $service = Get-Service -Name $serviceName
            if ($service.Status -eq "Running") {
              Write-Host "✅ 部署成功！服务正在运行"
              Write-Host "访问地址: http://localhost:5000"
            } else {
              Write-Host "❌ 服务启动失败"
              exit 1
            }